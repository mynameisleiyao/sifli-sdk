from building import *
import os
import rtconfig

PrepareEnv()

# Check SDK 
SIFLI_SDK = os.getenv('SIFLI_SDK')
if not SIFLI_SDK:
    print("Please run set_env.bat in root folder of SIFLI SDK to set environment.")
    exit()

# Add bootloader project
AddBootLoader(SIFLI_SDK,rtconfig.CHIP)

from building import *
lcpu_proj_path = '../lcpu'
lcpu_proj_name = 'lcpu'
if GetDepend('SOC_SF32LB52X'):
    AddLCPU(SIFLI_SDK,rtconfig.CHIP,"../../src/lcpu_img.c")
    print("lcpu project's path is example/ble/lcpu_general/project/common/sf32lb52x ")
else:
    AddChildProj(lcpu_proj_name, lcpu_proj_path, True, core="LCPU")
    print("lcpu project's  path is ../lcpu ")
# Add LCPU project

# Set default compile options
SifliEnv()

################################## change rtconfig.xxx to customize build ########################################
# print (rtconfig.OUTPUT_DIR)

OUTPUT_DIR=rtconfig.OUTPUT_DIR
TARGET = OUTPUT_DIR + rtconfig.TARGET_NAME + '.' + rtconfig.TARGET_EXT
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

# prepare building environment
objs = PrepareBuilding(env)

# make a building
DoBuilding(TARGET, objs)

AddFTAB(SIFLI_SDK, rtconfig.CHIP)

GenDownloadScript(env)

