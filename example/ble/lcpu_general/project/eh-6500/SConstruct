import os
import rtconfig
import re

# Check SDK 
SIFLI_SDK = os.getenv('SIFLI_SDK')
if not SIFLI_SDK:
    print("Please run set_env.bat in root folder of SIFLI SDK to set environment.")
    exit()
from building import *

# Set default compile options
SifliEnv()
#os.system("prebuild.bat")

################################## change rtconfig.xxx to customize build ########################################
# print (rtconfig.OUTPUT_DIR)

OUTPUT_DIR=rtconfig.OUTPUT_DIR
TARGET = OUTPUT_DIR + rtconfig.TARGET_NAME + '.' + rtconfig.TARGET_EXT
BIN_TARGET = OUTPUT_DIR + rtconfig.TARGET_NAME + '.bin'
#rtconfig.POST_ACTION ='fromelf --bin $TARGET --output ' + OUTPUT_DIR + rtconfig.TARGET_NAME + '.bin \n '
#rtconfig.POST_ACTION += '\nfromelf --text -c $TARGET --output ' + OUTPUT_DIR + rtconfig.TARGET_NAME + '.asm\n'
#rtconfig.POST_ACTION +=' python ../../../../../tools/patch/gen_src.py lcpu '+ BIN_TARGET + ' ../hcpu_big/applications/ \n'
#rtconfig.POST_ACTION +=' python ../../../../../tools/patch/gen_src.py lcpu '+ BIN_TARGET + ' ../hcpu/applications/ \n'
#rtconfig.POST_ACTION +=' python ../../../../../tools/patch/gen_src.py lcpu '+ BIN_TARGET + ' ../hcpu_v5/applications/ \n'
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

AddOption('--patch',
  dest='patch',
  nargs=1, type='string',
  action='store',
  metavar='DIR',
  help='patch to be built')

def pre_process(env, source):
    env = env.Clone()
    env.Replace(OBJSUFFIX = '.E')
    env.AppendUnique(CCFLAGS = ' -E -DPATCH_GENERATE')
    return env.Object(source)
    
def generate_patch(src_files):
    f_patch=open(OUTPUT_DIR+'patch_list.txt',"w")
    for f in src_files:    
        pre, ext = os.path.splitext(f)
        f=pre+'.E'
        if not os.path.exists(f):
            continue
        fp=open(f,"r")
        for line in fp:
            info=re.split(',|\\(|\\)|\t',line) 
            if (info[0].strip()=='PATCH'):
                f_patch.write(info[1].strip()+ " "+ info[2].strip()+" "+info[3].strip()+" 2 \n")
            if (info[0].strip()=='PATCH_DATA'):
                f_patch.write(info[1].strip()+ " "+ info[2].strip()+" "+info[3].strip()+" 1 \n")
        fp.close()
    f_patch.close()
    
patch = GetOption('patch')

# prepare building environment
objs = PrepareBuilding(env)

if (patch == None) :
    TARGET = OUTPUT_DIR + rtconfig.TARGET_NAME + '.' + rtconfig.TARGET_EXT
    # make a building
    DoBuilding(TARGET, objs)
else:
    
    env['LINKFLAGS']= " --cpu Cortex-M33 --strict --scatter "+ SIFLI_SDK+ "/drivers/boards/butterflite_fpga/linker_scripts/lcpu/link_patch.sct "
    env['LINKFLAGS']+= "--summary_stderr --info summarysizes --map --load_addr_map_info --xref --callgraph --symbols --info sizes --info totals --info unused --info veneers --list build/bf0_ap_patch.map "
    env['LINKFLAGS']+= "--symdefs build/bf0_ap_patch.symdefs --libpath=C:/Keil_v5/ARM/ARMCLANG/lib build/bf0_ap.symdefs"
    TARGET_2 = OUTPUT_DIR + rtconfig.TARGET_NAME + '_patch.' + rtconfig.TARGET_EXT    
    objs_2 = SConscript('patch/projects/'+patch+'/Sconscript', duplicate=0)    
    env.AddMethod(pre_process, 'PreProcess')
    env.Alias('preprocess', env.PreProcess(objs_2))
    #rtconfig.TARGET_NAME = 'lcpu_rom'
    rtconfig.POST_ACTION ='fromelf --bin $TARGET --output ' + OUTPUT_DIR + 'lcpu_rom' + '_patch.bin \n'
    rtconfig.POST_ACTION += 'fromelf -z $TARGET'+'\n'
    rtconfig.POST_ACTION += 'python ' + SIFLI_SDK + '/tools/patch/resolve.py ' + OUTPUT_DIR + '\n'
    rtconfig.POST_ACTION += 'python ' + './gen_src_lite.py lcpu_patch '+ OUTPUT_DIR + ' ./ '
    generate_patch(map(str, objs_2))
    DoBuilding(TARGET_2, objs_2)
